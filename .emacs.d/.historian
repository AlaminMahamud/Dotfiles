#s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (counsel-find-file (("/home/alamin/.config/i3blocks/" "/home/alamin/scripts/network.sh" "/home/alamin/dotfiles/scripts/i3blocks_scripts/custom/custom_bandwidth" "/home/alamin/dotfiles/scripts/i3blocks_scripts/iface" "/home/alamin/dotfiles/.i3/config" "/home/alamin/dotfiles/scripts/i3blocks_scripts/microphone" "/home/alamin/scripts/volume" "/home/alamin/.Xresources" "/home/alamin/dotfiles/.i3/config" "/home/alamin/.config/i3lock/i3lock.sh") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("/home/alamin/.i3/config" 2 "/home/alamin/.config/i3blocks/" 1 "/home/alamin/scripts/network.sh" 1 "/home/alamin/dotfiles/scripts/i3blocks_scripts/custom/custom_bandwidth" 1 "/home/alamin/dotfiles/scripts/i3blocks_scripts/iface" 1 "/home/alamin/dotfiles/.i3/config" 5 "/home/alamin/dotfiles/scripts/i3blocks_scripts/microphone" 1 "/home/alamin/scripts/volume" 2 "/home/alamin/.Xresources" 1 "/home/alamin/dotfiles/.config/i3blocks/config" 1 "/home/alamin/dotfiles/git/.gitconfig" 1 "/home/alamin/Dropbox/log-files/all_log.org" 3 "/home/alamin/.config/i3blocks/config" 2 "/home/alamin/Dropbox/log-files/book-portfolio/book_august_2017.org" 2 "/home/alamin/.zshrc" 1 "/home/alamin/.config/neofetch/config" 1 "/etc/rc.d" 1 "/etc/rc0.d/K01alsa-utils" 1 "/home/alamin/.config/i3lock/i3lock.sh" 1))) next-line (("list-colors-display") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("list-colors-display" 1))) nil (("list-colors-display") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("list-colors-display" 1))) self-insert-command (("list-colors-display") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("list-colors-display" 1))) save-buffer (("~/" "list-colors-display") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("list-colors-display" 1 "~/" 1))) (closure ((split-function . split-window-vertically) t) (&optional arg) "Split this window and switch to the new window unless ARG is provided." (interactive "P") (funcall split-function) (let ((target-window (next-window))) (set-window-buffer target-window (other-buffer)) (if arg nil (select-window target-window)))) (("list-colors-display") . #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("list-colors-display" 1)))))